/// <reference types="bun-types" />
import type { ServerWebSocket, WebSocketHandler } from 'bun';
import { Elysia, DEFS, type UnwrapSchema, type ElysiaInstance } from 'elysia';
import type { ElysiaWSContext, WSTypedSchema } from './types';
export declare const mapPathnameAndQueryRegEx: RegExp;
export declare class ElysiaWS<WS extends ElysiaWSContext<any> = ElysiaWSContext, Schema extends WSTypedSchema = WSTypedSchema, Instance extends ElysiaInstance = ElysiaInstance> {
    raw: WS;
    data: WS['data'];
    isSubscribed: WS['isSubscribed'];
    ref?: NonNullable<Instance['store'][typeof DEFS]>;
    constructor(ws: WS);
    publish(topic: string, data: UnwrapSchema<Schema['response'], Instance>, compress?: boolean): this;
    send(data: UnwrapSchema<Schema['response'], Instance>): this;
    subscribe(room: string): this;
    unsubscribe(room: string): this;
    cork(callback: (ws: ServerWebSocket<any>) => any): this;
    close(): this;
}
export declare const websocket: (config?: Omit<WebSocketHandler, 'open' | 'message' | 'close' | 'drain'>) => (app: Elysia) => Elysia<{
    store: Record<any, any> & Record<typeof import("elysia").SCHEMA, {}> & Record<typeof DEFS, {}>;
    request: {
        publish: (topic: string, data: string | import("bun").ArrayBufferView | ArrayBuffer, compress?: boolean | undefined) => number;
    };
    schema: {};
}>;
export default websocket;
