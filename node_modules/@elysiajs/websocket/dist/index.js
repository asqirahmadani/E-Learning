import { Elysia, createValidationError, getSchemaValidator, DEFS } from 'elysia';
import { Raikiri } from 'raikiri';
import { nanoid } from 'nanoid';
export const mapPathnameAndQueryRegEx = /:\/\/[^/]+([^#?]+)(?:\?([^#]+))?/;
const getPath = (path) => path.match(mapPathnameAndQueryRegEx)?.[1] ?? '/';
export class ElysiaWS {
    constructor(ws) {
        this.raw = ws;
        this.data = ws.data;
        this.isSubscribed = ws.isSubscribed;
    }
    publish(topic, data, compress) {
        if (typeof data === 'object')
            data = JSON.stringify(data);
        this.raw.publish(topic, data, compress);
        return this;
    }
    send(data) {
        if (typeof data === 'object')
            data = JSON.stringify(data);
        this.raw.send(data);
        return this;
    }
    subscribe(room) {
        this.raw.subscribe(room);
        return this;
    }
    unsubscribe(room) {
        this.raw.unsubscribe(room);
        return this;
    }
    cork(callback) {
        this.raw.cork(callback);
        return this;
    }
    close() {
        this.raw.close();
        return this;
    }
}
export const websocket = (config) => (app) => {
    if (!app.websocketRouter)
        app.websocketRouter = new Raikiri();
    const router = app.websocketRouter;
    if (!app.config.serve)
        app.config.serve = {
            websocket: {
                ...config,
                open(ws) {
                    if (!ws.data)
                        return;
                    const url = (ws?.data).request.url;
                    const index = url.indexOf('?');
                    const route = router.match('subscribe', getPath(url))?.store;
                    if (route && route.open)
                        route.open(new ElysiaWS(ws));
                },
                message(ws, message) {
                    if (!ws.data)
                        return;
                    const url = (ws?.data).request.url;
                    const index = url.indexOf('?');
                    const route = router.match('subscribe', getPath(url))?.store;
                    if (!route?.message)
                        return;
                    message = message.toString();
                    const start = message.charCodeAt(0);
                    if (start === 47 || start === 123)
                        try {
                            message = JSON.parse(message);
                        }
                        catch (error) { }
                    else if (!Number.isNaN(+message))
                        message = +message;
                    for (let i = 0; i <
                        ws.data
                            .transformMessage.length; i++) {
                        const temp = ws.data.transformMessage[i](message);
                        if (temp !== undefined)
                            message = temp;
                    }
                    if (ws.data.message?.Check(message) === false)
                        return void ws.send(createValidationError('message', ws.data
                            .message, message).cause);
                    route.message(new ElysiaWS(ws), message);
                },
                close(ws, code, reason) {
                    if (!ws.data)
                        return;
                    const queryIndex = (ws?.data).request.url.indexOf('?');
                    const url = (ws?.data).request.url;
                    const index = url.indexOf('?');
                    const route = router.match('subscribe', getPath(url))?.store;
                    if (route && route.close)
                        route.close(new ElysiaWS(ws), code, reason);
                },
                drain(ws) {
                    if (!ws.data)
                        return;
                    const url = (ws?.data).request.url;
                    const index = url.indexOf('?');
                    const route = router.match('subscribe', getPath(url))?.store;
                    if (route && route.drain)
                        route.drain(new ElysiaWS(ws));
                }
            }
        };
    return app
        .decorate('publish', app.server?.publish)
        .onRequest((context) => {
        if (app.server)
            context.publish = app.server.publish;
    });
};
Elysia.prototype.ws = function (path, options) {
    if (!this.websocketRouter)
        throw new Error("Can't find WebSocket. Please register WebSocket plugin first");
    this.websocketRouter.add('subscribe', path, options);
    return this.get(path, (context) => {
        if (this.server.upgrade(context.request, {
            headers: typeof options.headers === 'function'
                ? options.headers(context)
                : options.headers,
            data: {
                ...context,
                id: nanoid(),
                message: getSchemaValidator(options.schema?.body, this.store[DEFS]),
                transformMessage: !options.transform
                    ? []
                    : Array.isArray(options.transformMessage)
                        ? options.transformMessage
                        : [options.transformMessage]
            }
        }))
            return;
        context.set.status = 400;
        return 'Expected a websocket connection';
    }, {
        beforeHandle: options.beforeHandle,
        transform: options.transform,
        schema: {
            headers: options.schema?.headers,
            params: options.schema?.params,
            query: options.schema?.query
        }
    });
};
export default websocket;
