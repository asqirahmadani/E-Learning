<!DOCTYPE html>
<html lang="id">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Dashboard Kepala Sekolah - E-Learning</title>
   <style>
      * {
         margin: 0;
         padding: 0;
         box-sizing: border-box;
      }

      body {
         font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
         background: #f5f7fa;
         min-height: 100vh;
      }

      .header {
         background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
         color: white;
         padding: 1rem 2rem;
         display: flex;
         justify-content: space-between;
         align-items: center;
         box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .user-info {
         display: flex;
         align-items: center;
         gap: 1rem;
      }

      .logout-btn {
         background: rgba(255, 255, 255, 0.2);
         border: 1px solid rgba(255, 255, 255, 0.3);
         color: white;
         padding: 0.5rem 1rem;
         border-radius: 5px;
         cursor: pointer;
         transition: background 0.3s;
      }

      .logout-btn:hover {
         background: rgba(255, 255, 255, 0.3);
      }

      .main-content {
         display: grid;
         grid-template-columns: 250px 1fr;
         min-height: calc(100vh - 80px);
      }

      .sidebar {
         background: white;
         box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
         padding: 2rem 0;
      }

      .nav-item {
         padding: 1rem 2rem;
         cursor: pointer;
         transition: all 0.3s;
         border-left: 3px solid transparent;
      }

      .nav-item:hover,
      .nav-item.active {
         background: #f8f9ff;
         border-left-color: #667eea;
         color: #667eea;
      }

      .content-area {
         padding: 2rem;
      }

      .page-section {
         display: none;
      }

      .page-section.active {
         display: block;
      }

      .stats-grid {
         display: grid;
         grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
         gap: 1.5rem;
         margin-bottom: 2rem;
      }

      .stat-card {
         background: white;
         padding: 2rem;
         border-radius: 10px;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         text-align: center;
      }

      .stat-value {
         font-size: 2.5rem;
         font-weight: bold;
         color: #667eea;
         margin-bottom: 0.5rem;
      }

      .stat-label {
         color: #666;
         font-size: 0.9rem;
      }

      .card {
         background: white;
         border-radius: 10px;
         padding: 2rem;
         margin-bottom: 1.5rem;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .card-title {
         font-size: 1.2rem;
         font-weight: 600;
         color: #333;
         margin-bottom: 1rem;
      }

      .form-group {
         margin-bottom: 1rem;
      }

      .form-group label {
         display: block;
         margin-bottom: 0.5rem;
         color: #333;
         font-weight: 500;
      }

      .form-group input,
      .form-group select,
      .form-group textarea {
         width: 100%;
         padding: 0.75rem;
         border: 2px solid #e1e5e9;
         border-radius: 5px;
         font-size: 1rem;
      }

      .btn {
         background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
         color: white;
         border: none;
         padding: 0.75rem 1.5rem;
         border-radius: 5px;
         cursor: pointer;
         font-weight: 600;
         transition: transform 0.2s;
      }

      .btn:hover {
         transform: translateY(-2px);
      }

      .btn-danger {
         background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
      }

      .btn-success {
         background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
      }

      .table {
         width: 100%;
         border-collapse: collapse;
         margin-top: 1rem;
      }

      .table th,
      .table td {
         padding: 1rem;
         text-align: left;
         border-bottom: 1px solid #e1e5e9;
      }

      .table th {
         background: #f8f9ff;
         color: #667eea;
         font-weight: 600;
      }

      .status-active {
         background: #27ae60;
         color: white;
         padding: 0.25rem 0.5rem;
         border-radius: 15px;
         font-size: 0.8rem;
      }

      .status-inactive {
         background: #e74c3c;
         color: white;
         padding: 0.25rem 0.5rem;
         border-radius: 15px;
         font-size: 0.8rem;
      }

      .chart-container {
         width: 100%;
         height: 300px;
         background: white;
         border-radius: 10px;
         padding: 1rem;
         display: flex;
         align-items: center;
         justify-content: center;
         color: #666;
      }

      .alert {
         padding: 1rem;
         border-radius: 5px;
         margin-bottom: 1rem;
         display: none;
      }

      .alert-success {
         background: #d4edda;
         color: #155724;
         border: 1px solid #c3e6cb;
      }

      .alert-error {
         background: #f8d7da;
         color: #721c24;
         border: 1px solid #f5c6cb;
      }

      .modal-overlay {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background: rgba(0, 0, 0, 0.5);
         display: flex;
         justify-content: center;
         align-items: center;
         z-index: 1000;
      }

      .modal-content {
         background: white;
         border-radius: 10px;
         width: 90%;
         max-width: 600px;
         max-height: 80vh;
         overflow-y: auto;
         box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      }

      .modal-header {
         display: flex;
         justify-content: space-between;
         align-items: center;
         padding: 1.5rem;
         border-bottom: 1px solid #e1e5e9;
      }

      .modal-header h3 {
         margin: 0;
         color: #333;
      }

      .modal-close {
         background: none;
         border: none;
         font-size: 1.5rem;
         cursor: pointer;
         color: #666;
         padding: 0;
         width: 30px;
         height: 30px;
         display: flex;
         align-items: center;
         justify-content: center;
      }

      .modal-close:hover {
         color: #333;
      }

      .modal-body {
         padding: 1.5rem;
      }

      .tugas-list {
         display: flex;
         flex-direction: column;
         gap: 1rem;
      }

      .tugas-item {
         background: #f8f9ff;
         border: 1px solid #e1e5e9;
         border-radius: 8px;
         padding: 1rem;
      }

      .tugas-info {
         display: flex;
         justify-content: space-between;
         align-items: center;
         margin-bottom: 0.5rem;
      }

      .tugas-info h4 {
         margin: 0;
         color: #333;
         font-size: 1rem;
      }

      .status-badge {
         padding: 0.25rem 0.75rem;
         border-radius: 15px;
         font-size: 0.8rem;
         font-weight: 600;
         text-transform: capitalize;
      }

      .status-belum_dikerjakan {
         background: #ffeaa7;
         color: #d63031;
      }

      .status-dikerjakan {
         background: #74b9ff;
         color: white;
      }

      .status-selesai {
         background: #00b894;
         color: white;
      }

      .tugas-nilai {
         font-weight: bold;
         color: #667eea;
         margin-top: 0.5rem;
      }

      .tugas-hasil {
         color: #666;
         font-style: italic;
         margin-top: 0.25rem;
      }

      .diskusi-list {
         display: flex;
         flex-direction: column;
         gap: 1rem;
      }

      .diskusi-item {
         background: #f8f9ff;
         border: 1px solid #e1e5e9;
         border-radius: 8px;
         padding: 1rem;
      }

      .diskusi-header {
         display: flex;
         justify-content: space-between;
         align-items: center;
         margin-bottom: 0.75rem;
      }

      .diskusi-header strong {
         color: #667eea;
         font-size: 0.9rem;
      }

      .diskusi-date {
         color: #666;
         font-size: 0.8rem;
      }

      .diskusi-content {
         color: #333;
         line-height: 1.5;
         background: white;
         padding: 0.75rem;
         border-radius: 5px;
         border-left: 3px solid #667eea;
      }

      .connection-status {
         padding: 0.5rem;
         border-radius: 4px;
         margin-bottom: 1rem;
         font-size: 0.9rem;
      }

      .connection-status.connected {
         background-color: #d4edda;
         color: #155724;
         border: 1px solid #c3e6cb;
      }

      .connection-status.disconnected {
         background-color: #f8d7da;
         color: #721c24;
         border: 1px solid #f5c6cb;
      }

      .connection-status.connecting {
         background-color: #fff3cd;
         color: #856404;
         border: 1px solid #ffeaa7;
      }
   </style>
</head>

<body>
   <div class="header">
      <div>
         <h1>Dashboard Kepala Sekolah</h1>
         <p>Sistem Manajemen E-Learning</p>
      </div>
      <div class="user-info">
         <span>Selamat datang, <%= user.nama %></span>
         <button class="logout-btn" onclick="logout()">Logout</button>
      </div>
   </div>

   <div class="main-content">
      <div class="sidebar">
         <div class="nav-item active" onclick="showSection('dashboard')">üìä Dashboard</div>
         <div class="nav-item" onclick="showSection('guru-management')">üë®‚Äçüè´ Manajemen Guru</div>
         <div class="nav-item" onclick="showSection('siswa-management')">üë®‚Äçüéì Manajemen Siswa</div>
         <div class="nav-item" onclick="showSection('materi-management')">üìö Materi Pembelajaran</div>
         <div class="nav-item" onclick="showSection('diskusi-management')">üí¨ Diskusi Kelas</div>
         <div class="nav-item" onclick="showSection('chat-room')">üí¨ Ruang Diskusi</div>
      </div>

      <div class="content-area">
         <div id="alert" class="alert">
            <span id="alertMessage"></span>
         </div>

         <div id="dashboard" class="page-section active">
            <h2>Ringkasan Sistem</h2>

            <div class="stats-grid">
               <div class="stat-card">
                  <div class="stat-value" id="totalGuru">-</div>
                  <div class="stat-label">Total Guru</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="totalSiswa">-</div>
                  <div class="stat-label">Total Siswa</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="totalKelas">-</div>
                  <div class="stat-label">Total Kelas</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="totalMateri">-</div>
                  <div class="stat-label">Materi Pembelajaran</div>
               </div>
            </div>

            <div class="card">
               <div class="card-title">Aktivitas Pembelajaran</div>
               <div class="chart-container">
                  <p>Grafik aktivitas pembelajaran akan ditampilkan di sini</p>
               </div>
            </div>
         </div>

         <div id="guru-management" class="page-section">
            <h2>Manajemen Guru</h2>

            <div class="card">
               <div class="card-title">Tambah Guru Baru</div>
               <form id="addGuruForm">
                  <div class="form-group">
                     <label for="guruNama">Nama Lengkap</label>
                     <input type="text" id="guruNama" name="nama" required>
                  </div>
                  <div class="form-group">
                     <label for="guruEmail">Email</label>
                     <input type="email" id="guruEmail" name="email" required>
                  </div>
                  <div class="form-group">
                     <label for="guruPassword">Password</label>
                     <input type="password" id="guruPassword" name="password" required>
                  </div>
                  <div class="form-group">
                     <label for="guruBidang">Bidang</label>
                     <input type="text" id="guruBidang" name="bidang" placeholder="e.g., Matematika" required>
                  </div>
                  <button type="submit" class="btn">Tambah Guru</button>
               </form>
            </div>

            <div class="card">
               <div class="card-title">Daftar Guru</div>
               <table class="table" id="guruTable">
                  <thead>
                     <tr>
                        <th>Nama</th>
                        <th>Email</th>
                        <th>Bidang</th>
                        <th>Status</th>
                        <th>Aksi</th>
                     </tr>
                  </thead>
                  <tbody id="guruTableBody">
                  </tbody>
               </table>
            </div>
         </div>

         <div id="siswa-management" class="page-section">
            <h2>Manajemen Siswa</h2>

            <div class="card">
               <div class="card-title">Daftar Siswa</div>
               <table class="table">
                  <thead>
                     <tr>
                        <th>Nama</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>Aksi</th>
                     </tr>
                  </thead>
                  <tbody id="siswaTableBody">
                  </tbody>
               </table>
            </div>
         </div>

         <div id="materi-management" class="page-section">
            <h2>Manajemen Materi</h2>

            <div class="card">
               <div class="card-title">Daftar Materi Pembelajaran</div>
               <table class="table">
                  <thead>
                     <tr>
                        <th>Judul Materi</th>
                        <th>Guru Pengampu</th>
                        <th>Tanggal Dibuat</th>
                        <th>Aksi</th>
                     </tr>
                  </thead>
                  <tbody id="materiTableBody">
                  </tbody>
               </table>
            </div>
         </div>

         <div id="diskusi-management" class="page-section">
            <h2>Manajemen Diskusi</h2>

            <div class="card">
               <div class="card-title">Tambah Diskusi Kelas</div>
               <form id="addDiskusiForm">
                  <div class="form-group">
                     <label for="diskusiKelas">Kelas</label>
                     <input type="text" id="diskusiKelas" name="kelas" placeholder="e.g., Kelas 1" required>
                  </div>
                  <div class="form-group">
                     <label for="diskusiIsi">Isi Diskusi</label>
                     <textarea id="diskusiIsi" name="isi" rows="4" required></textarea>
                  </div>
                  <button type="submit" class="btn">Tambah Diskusi</button>
               </form>
            </div>

            <div class="card">
               <div class="card-title">Daftar Diskusi Kelas</div>
               <table class="table">
                  <thead>
                     <tr>
                        <th>Kelas</th>
                        <th>Isi</th>
                        <th>Tanggal</th>
                     </tr>
                  </thead>
                  <tbody id="diskusiTableBody">
                  </tbody>
               </table>
            </div>
         </div>

         <div id="chat-room" class="page-section">
            <h2>Ruang Diskusi Real-time</h2>

            <div class="card">
               <div class="connection-panel">
                  <div id="connectionStatus" class="connection-status disconnected">
                     <span id="statusText">Status: Tidak terhubung</span>
                     <button id="reconnectButton" class="btn btn-small">Coba Lagi</button>
                  </div>

                  <div class="online-users">
                     <h4>Pengguna Online:</h4>
                     <div id="onlineUsers">Memuat...</div>
                  </div>
               </div>
               <div class="card-title">Pilih Kelas untuk Diskusi</div>
               <div class="form-group">
                  <select id="chatKelas" onchange="changeChatRoom()">
                     <option value="Kelas 1A">Kelas 1A</option>
                     <option value="Kelas 2B">Kelas 2B</option>
                     <option value="Kelas 3C">Kelas 3C</option>
                     <option value="Umum">Diskusi Umum</option>
                  </select>
               </div>
            </div>

            <div class="card">
               <div class="card-title" id="currentChatRoom">Diskusi: Kelas 1A</div>

               <div id="chatContainer"
                  style="height: 400px; overflow-y: auto; border: 1px solid #e1e5e9; border-radius: 5px; padding: 1rem; margin-bottom: 1rem; background: #f8f9ff;">
                  <div id="chatMessages">
                     <div style="text-align: center; color: #666; padding: 2rem;">
                        Memuat pesan...
                     </div>
                  </div>
               </div>

               <div class="form-group">
                  <textarea id="chatMessage" placeholder="Ketik pesan Anda di sini..." rows="3"
                     style="width: 100%; padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 5px;"></textarea>
               </div>

               <button class="btn" onclick="sendChatMessage()" style="width: 100%;">
                  Kirim Pesan
               </button>
            </div>
         </div>
      </div>
   </div>

   <script>
      let dashboardData = null;
      let chatSocket = null;
      let currentChatRoom = 'Kelas 1A';
      let wsPort = 3001;
      let reconnectAttempts = 0;
      let connectionStatus = 'disconnected';

      function updateConnectionStatus(status, message = '') {
         connectionStatus = status;
         const statusElement = document.getElementById('connectionStatus');
         const statusText = document.getElementById('statusText');

         if (statusElement && statusText) {
            statusElement.className = `connection-status ${status}`;

            switch (status) {
               case 'connected':
                  statusText.textContent = 'Status: Terhubung';
                  break;
               case 'connecting':
                  statusText.textContent = 'Status: Menghubungkan...';
                  break;
               case 'disconnected':
                  statusText.textContent = 'Status: Tidak terhubung' + (message ? ` - ${message}` : '');
                  break;
               case 'error':
                  statusText.textContent = 'Status: Error' + (message ? ` - ${message}` : '');
                  break;
            }
         }
      }

      function getSessionToken() {
         const cookies = document.cookie.split(';');
         const sessionCookie = cookies.find(c => c.trim().startsWith('session='));
         return sessionCookie ? sessionCookie.split('=')[1].trim() : null;
      }

      function connectWebSocket() {
         if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
            return;
         }

         if (chatSocket) {
            chatSocket.onclose = null;
            chatSocket.onerror = null;
            chatSocket.close();
         }

         updateConnectionStatus('connecting');

         const token = getSessionToken();
         const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
         const host = window.location.hostname;

         const wsUrl = `${protocol}//${host}:${wsPort}?token=${token || 'test'}`;

         console.log('Connecting to WebSocket:', wsUrl);

         try {
            chatSocket = new WebSocket(wsUrl);

            chatSocket.onopen = function (event) {
               console.log('WebSocket connection established successfully');
               reconnectAttempts = 0;
               updateConnectionStatus('connected');
               showAlert('Berhasil terhubung ke ruang diskusi', 'success');

               setTimeout(() => {
                  if (chatSocket.readyState === WebSocket.OPEN) {
                     chatSocket.send(JSON.stringify({
                        type: 'history_request',
                        kelas: currentChatRoom
                     }));
                  }
               }, 1000);
            };

            chatSocket.onmessage = function (event) {
               try {
                  const message = JSON.parse(event.data);
                  console.log('Received message:', message);

                  if (message.type === 'connected') {
                     console.log('Server connection confirmed');
                     updateConnectionStatus('connected');
                  } else if (message.type === 'history') {
                     displayChatMessages(message.data);
                  } else if (message.type === 'chat') {
                     addChatMessage(message.data);
                  } else if (message.type === 'online_users') {
                     updateOnlineUsers(message.data);
                  } else if (message.type === 'pong') {
                     console.log('Pong received');
                  } else if (message.type === 'error') {
                     showAlert('Error: ' + message.message, 'error');
                  }
               } catch (error) {
                  console.error('Error parsing message:', error, event.data);
               }
            };

            chatSocket.onclose = function (event) {
               console.log('WebSocket connection closed:', event.code, event.reason);
               updateConnectionStatus('disconnected', `Kode: ${event.code} - ${event.reason || 'Tidak diketahui'}`);

               reconnectAttempts++;
               const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 30000);

               console.log(`Reconnecting in ${delay}ms (attempt ${reconnectAttempts})`);
               setTimeout(connectWebSocket, delay);
            };

            chatSocket.onerror = function (error) {
               console.error('WebSocket error:', error);
               updateConnectionStatus('error', 'Kesalahan koneksi');
            };

         } catch (error) {
            console.error('Error creating WebSocket:', error);
            updateConnectionStatus('error', 'Gagal membuat koneksi');
            setTimeout(connectWebSocket, 5000);
         }
      }

      function checkConnection() {
         if (!chatSocket || chatSocket.readyState !== WebSocket.OPEN) {
            console.log('Connection lost, reconnecting...');
            connectWebSocket();
            return false;
         }
         return true;
      }

      function showAlert(message, type = 'success') {
         const alert = document.getElementById('alert');
         const alertMessage = document.getElementById('alertMessage');

         alert.className = `alert alert-${type}`;
         alertMessage.textContent = message;
         alert.style.display = 'block';

         setTimeout(() => {
            alert.style.display = 'none';
         }, 5000);
      }

      function showSection(sectionId) {
         document.querySelectorAll('.page-section').forEach(section => {
            section.classList.remove('active');
         });
         document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
         });

         document.getElementById(sectionId).classList.add('active');
         event.target.classList.add('active');

         if (sectionId === 'guru-management') {
            loadGuruList();
         } else if (sectionId === 'siswa-management') {
            loadSiswaList();
         } else if (sectionId === 'materi-management') {
            loadMateriList();
         } else if (sectionId === 'diskusi-management') {
            loadDiskusiList();
         } else if (sectionId === 'chat-room') {
            setTimeout(connectWebSocket, 100);
         } else if (chatSocket) {
            chatSocket.close();
         }
      }

      function displayChatMessages(messages) {
         const chatMessages = document.getElementById('chatMessages');
         chatMessages.innerHTML = '';

         messages.forEach(message => {
            addChatMessage(message, false);
         });

         scrollChatToBottom();
      }

      function addChatMessage(message, animate = true) {
         if (message.kelas !== currentChatRoom) {
            return;
         }

         const chatMessages = document.getElementById('chatMessages');
         const messageElement = document.createElement('div');

         messageElement.innerHTML = `
            <div style="margin-bottom: 1rem; padding: 0.75rem; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); ${animate ? 'animation: fadeIn 0.3s ease;' : ''}">
               <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                  <strong style="color: #667eea;">${message.user_nama}</strong>
                  <span style="font-size: 0.8rem; color: #666;">${new Date(message.created_at).toLocaleTimeString()}</span>
               </div>
               <div style="color: #333;">${message.isi}</div>
               <div style="font-size: 0.7rem; color: #888; margin-top: 0.25rem;">
                  ${message.user_role} ‚Ä¢ ${message.kelas}
               </div>
            </div>
         `;

         chatMessages.appendChild(messageElement);

         if (animate) {
            scrollChatToBottom();
         }
      }

      function scrollChatToBottom() {
         const chatContainer = document.getElementById('chatContainer');
         chatContainer.scrollTop = chatContainer.scrollHeight;
      }

      function sendChatMessage() {
         if (!checkConnection()) {
            showAlert('Sedang mencoba menghubungkan...', 'warning');
            return;
         }

         const messageInput = document.getElementById('chatMessage');
         const message = messageInput?.value.trim();

         if (!message) {
            showAlert('Pesan tidak boleh kosong', 'error');
            return;
         }

         try {
            chatSocket.send(JSON.stringify({
               type: 'chat',
               kelas: currentChatRoom,
               isi: message,
               timestamp: Date.now()
            }));

            messageInput.value = '';
         } catch (error) {
            console.error('Error sending message:', error);
            showAlert('Gagal mengirim pesan', 'error');
            connectWebSocket();
         }
      }

      function updateOnlineUsers(users) {
         const onlineUsersElement = document.getElementById('onlineUsers');
         if (onlineUsersElement) {
            onlineUsersElement.innerHTML = users.map(user =>
               `<div>${user.nama} (${user.role})</div>`
            ).join('');
         }
      }

      function changeChatRoom() {
         const roomSelect = document.getElementById('chatKelas');
         currentChatRoom = roomSelect.value;

         document.getElementById('currentChatRoom').textContent = `Diskusi: ${currentChatRoom}`;

         if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
            chatSocket.send(JSON.stringify({
               type: 'history_request',
               kelas: currentChatRoom
            }));
         } else {
            connectWebSocket();
         }

         document.getElementById('chatMessages').innerHTML = `
            <div style="text-align: center; color: #666; padding: 2rem;">
               Memuat pesan untuk ${currentChatRoom}...
            </div>
         `;
      }

      const style = document.createElement('style');
      style.textContent = `
         @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
         }
      `;
      document.head.appendChild(style);

      async function loadDashboardData() {
         try {
            const response = await fetch('/kepsek/info-dasar', {
               method: 'GET',
               credentials: 'include'
            });

            if (response.ok) {
               dashboardData = await response.json();
               updateStatistics();
            } else {
               const error = await response.text();
               showAlert('Error loading dashboard: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error loading dashboard:', error);
            showAlert('Terjadi kesalahan saat memuat dashboard', 'error');
         }
      }

      function updateStatistics() {
         if (dashboardData) {
            document.getElementById('totalGuru').textContent = dashboardData.jumlah_guru || 0;
            document.getElementById('totalSiswa').textContent = dashboardData.jumlah_siswa || 0;
            document.getElementById('totalKelas').textContent = dashboardData.jumlah_kelas || 0;
            document.getElementById('totalMateri').textContent = dashboardData.jumlah_materi || 0;
         }
      }

      async function loadGuruList() {
         try {
            const response = await fetch('/kepsek/guru/daftar', {
               method: 'GET',
               credentials: 'include'
            });

            if (response.ok) {
               const guruList = await response.json();
               updateGuruTable(guruList);
            } else {
               const error = await response.text();
               showAlert('Error loading guru list: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error loading guru list:', error);
            showAlert('Terjadi kesalahan saat memuat daftar guru', 'error');
         }
      }

      function updateGuruTable(guruList) {
         const tbody = document.getElementById('guruTableBody');
         tbody.innerHTML = '';

         guruList.forEach(guru => {
            const row = document.createElement('tr');
            row.innerHTML = `
               <td>${guru.nama}</td>
               <td>${guru.email}</td>
               <td>${guru.bidang || '-'}</td>
               <td><span class="status-${guru.status}">${guru.status}</span></td>
               <td>
                  <button class="btn ${guru.status === 'active' ? 'btn-danger' : 'btn-success'}" 
                         onclick="toggleUserStatus(${guru.id}, '${guru.status === 'active' ? 'inactive' : 'active'}')">
                     ${guru.status === 'active' ? 'Nonaktifkan' : 'Aktifkan'}
                  </button>
                  <button class="btn btn-danger" onclick="hapusGuru(${guru.id})" style="margin-left: 5px;">
                     Hapus
                  </button>
               </td>
            `;
            tbody.appendChild(row);
         });
      }

      async function loadSiswaList() {
         try {
            const response = await fetch('/kepsek/siswa/daftar', {
               method: 'GET',
               credentials: 'include'
            });

            if (response.ok) {
               const siswaList = await response.json();
               updateSiswaTable(siswaList);
            } else {
               const error = await response.text();
               showAlert('Error loading siswa list: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error loading siswa list:', error);
            showAlert('Terjadi kesalahan saat memuat daftar siswa', 'error');
         }
      }

      function updateSiswaTable(siswaList) {
         const tbody = document.getElementById('siswaTableBody');
         tbody.innerHTML = '';

         siswaList.forEach(siswa => {
            const row = document.createElement('tr');
            row.innerHTML = `
               <td>${siswa.nama}</td>
               <td>${siswa.email}</td>
               <td><span class="status-${siswa.status}">${siswa.status}</span></td>
               <td>
                  <button class="btn" onclick="lihatTugasSiswa(${siswa.id})">
                     Lihat Tugas
                  </button>
               </td>
            `;
            tbody.appendChild(row);
         });
      }

      async function loadMateriList() {
         try {
            const response = await fetch('/kepsek/materi/daftar', {
               method: 'GET',
               credentials: 'include'
            });

            if (response.ok) {
               const materiList = await response.json();
               updateMateriTable(materiList);
               document.getElementById('totalMateri').textContent = materiList.length;
            } else {
               const error = await response.text();
               showAlert('Error loading materi list: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error loading materi list:', error);
            showAlert('Terjadi kesalahan saat memuat daftar materi', 'error');
         }
      }

      function updateMateriTable(materiList) {
         const tbody = document.getElementById('materiTableBody');
         tbody.innerHTML = '';

         materiList.forEach(materi => {
            const row = document.createElement('tr');
            row.innerHTML = `
               <td>${materi.judul}</td>
               <td>${materi.guru || '-'}</td>
               <td>${new Date(materi.created_at).toLocaleDateString()}</td>
               <td>
                  <button class="btn" onclick="lihatDiskusiMateri(${materi.id})">
                     Lihat Diskusi
                  </button>
               </td>
            `;
            tbody.appendChild(row);
         });
      }

      async function loadDiskusiList() {
         try {
            const response = await fetch('/kepsek/kelas/diskusi', {
               method: 'GET',
               credentials: 'include'
            });

            if (response.ok) {
               const diskusiList = await response.json();
               updateDiskusiTable(diskusiList);
            } else {
               const error = await response.text();
               showAlert('Error loading diskusi list: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error loading diskusi list:', error);
            showAlert('Terjadi kesalahan saat memuat daftar diskusi', 'error');
         }
      }

      function updateDiskusiTable(diskusiList) {
         const tbody = document.getElementById('diskusiTableBody');
         tbody.innerHTML = '';

         diskusiList.forEach(diskusi => {
            const row = document.createElement('tr');
            row.innerHTML = `
               <td>${diskusi.kelas}</td>
               <td>${diskusi.isi.substring(0, 100)}${diskusi.isi.length > 100 ? '...' : ''}</td>
               <td>${new Date(diskusi.created_at).toLocaleDateString()}</td>
            `;
            tbody.appendChild(row);
         });
      }

      document.getElementById('addGuruForm').addEventListener('submit', async function (e) {
         e.preventDefault();

         const formData = new FormData(this);
         const guruData = {
            nama: formData.get('nama'),
            email: formData.get('email'),
            password: formData.get('password'),
            bidang: formData.get('bidang')
         };

         try {
            const response = await fetch('/kepsek/guru/tambah', {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json'
               },
               credentials: 'include',
               body: JSON.stringify(guruData)
            });

            if (response.ok) {
               const result = await response.json();
               showAlert('Guru berhasil ditambahkan!');
               this.reset();
               loadGuruList();
               loadDashboardData();
            } else {
               const error = await response.json();
               showAlert('Error: ' + error.error, 'error');
            }
         } catch (error) {
            console.error('Error adding guru:', error);
            showAlert('Terjadi kesalahan saat menambah guru', 'error');
         }
      });

      document.getElementById('addDiskusiForm').addEventListener('submit', async function (e) {
         e.preventDefault();

         const formData = new FormData(this);
         const diskusiData = {
            kelas: formData.get('kelas'),
            isi: formData.get('isi')
         };

         try {
            const response = await fetch('/kepsek/kelas/diskusi', {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json'
               },
               credentials: 'include',
               body: JSON.stringify(diskusiData)
            });

            if (response.ok) {
               const result = await response.json();
               showAlert('Diskusi berhasil ditambahkan!');
               this.reset();
               loadDiskusiList();
            } else {
               const error = await response.text();
               showAlert('Error: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error adding diskusi:', error);
            showAlert('Terjadi kesalahan saat menambah diskusi', 'error');
         }
      });

      async function toggleUserStatus(userId, newStatus) {
         try {
            const response = await fetch(`/kepsek/guru/status/${userId}`, {
               method: 'PATCH',
               headers: {
                  'Content-Type': 'application/json'
               },
               credentials: 'include',
               body: JSON.stringify({
                  status: newStatus
               })
            });

            if (response.ok) {
               showAlert('Status user berhasil diubah!');
               loadGuruList();
            } else {
               const error = await response.text();
               showAlert('Error: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error updating user status:', error);
            showAlert('Terjadi kesalahan saat mengubah status user', 'error');
         }
      }

      async function hapusGuru(userId) {
         if (!confirm('Apakah Anda yakin ingin menghapus guru ini?')) {
            return;
         }

         try {
            const response = await fetch(`/kepsek/guru/hapus/${userId}`, {
               method: 'DELETE',
               credentials: 'include'
            });

            if (response.ok) {
               showAlert('Guru berhasil dihapus!');
               loadGuruList();
               loadDashboardData();
            } else {
               const error = await response.text();
               showAlert('Error: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error deleting guru:', error);
            showAlert('Terjadi kesalahan saat menghapus guru', 'error');
         }
      }

      async function lihatTugasSiswa(siswaId) {
         try {
            const response = await fetch(`/kepsek/siswa/tugas/${siswaId}`, {
               method: 'GET',
               credentials: 'include'
            });

            if (response.ok) {
               const tugasList = await response.json();
               let tugasHtml = 'Daftar Tugas:\n\n';
               tugasList.forEach(tugas => {
                  tugasHtml += `‚Ä¢ ${tugas.materi}: ${tugas.status}`;
                  if (tugas.nilai) tugasHtml += ` (Nilai: ${tugas.nilai})`;
                  tugasHtml += '\n';
               });
               alert(tugasHtml);
            } else {
               const error = await response.text();
               showAlert('Error: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error loading tugas siswa:', error);
            showAlert('Terjadi kesalahan saat memuat tugas siswa', 'error');
         }
      }

      async function lihatDiskusiMateri(materiId) {
         try {
            const response = await fetch(`/kepsek/kelas/diskusi-materi/${materiId}`, {
               method: 'GET',
               credentials: 'include'
            });

            if (response.ok) {
               const diskusiList = await response.json();
               let diskusiHtml = 'Diskusi Materi:\n\n';
               diskusiList.forEach(diskusi => {
                  diskusiHtml += `${diskusi.user} (${diskusi.role}): ${diskusi.isi}\n(${new Date(diskusi.created_at).toLocaleDateString()})\n\n`;
               });
               alert(diskusiHtml || 'Belum ada diskusi untuk materi ini.');
            } else {
               const error = await response.text();
               showAlert('Error: ' + error, 'error');
            }
         } catch (error) {
            console.error('Error loading diskusi materi:', error);
            showAlert('Terjadi kesalahan saat memuat diskusi materi', 'error');
         }
      }

      async function logout() {
         try {
            const response = await fetch('/logout', {
               method: 'POST',
               credentials: 'include'
            });

            window.location.href = '/login';
         } catch (error) {
            console.error('Logout error:', error);
            window.location.href = '/login';
         }
      }

      document.addEventListener('DOMContentLoaded', function () {
         loadDashboardData();
         setTimeout(connectWebSocket, 1000);

         const messageInput = document.getElementById('chatMessage');
         if (messageInput) {
            messageInput.addEventListener('keypress', function (e) {
               if (e.key === 'Enter') {
                  e.preventDefault();
                  sendChatMessage();
               }
            });
         }

         const reconnectButton = document.getElementById('reconnectButton');
         if (reconnectButton) {
            reconnectButton.addEventListener('click', function () {
               reconnectAttempts = 0;
               connectWebSocket();
            });
         }
      });
   </script>
</body>

</html>