<!DOCTYPE html>
<html lang="id">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Dashboard Guru - E-Learning</title>
   <style>
      * {
         margin: 0;
         padding: 0;
         box-sizing: border-box;

         margin: 0;
         padding: 0;
         box-sizing: border-box;
      }

      body {
         font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
         background: #f5f7fa;
         min-height: 100vh;
      }

      .header {
         background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
         color: white;
         padding: 1rem 2rem;
         display: flex;
         justify-content: space-between;
         align-items: center;
         box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .user-info {
         display: flex;
         align-items: center;
         gap: 1rem;
      }

      .logout-btn {
         background: rgba(255, 255, 255, 0.2);
         border: 1px solid rgba(255, 255, 255, 0.3);
         color: white;
         padding: 0.5rem 1rem;
         border-radius: 5px;
         cursor: pointer;
         transition: background 0.3s;
      }

      .logout-btn:hover {
         background: rgba(255, 255, 255, 0.3);
      }

      .main-content {
         display: grid;
         grid-template-columns: 250px 1fr;
         min-height: calc(100vh - 80px);
      }

      .sidebar {
         background: white;
         box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
         padding: 2rem 0;
      }

      .nav-item {
         padding: 1rem 2rem;
         cursor: pointer;
         transition: all 0.3s;
         border-left: 3px solid transparent;
      }

      .nav-item:hover,
      .nav-item.active {
         background: #f8fff9;
         border-left-color: #2ecc71;
         color: #2ecc71;
      }

      .content-area {
         padding: 2rem;
      }

      .page-section {
         display: none;
      }

      .page-section.active {
         display: block;
      }

      .stats-grid {
         display: grid;
         grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
         gap: 1.5rem;
         margin-bottom: 2rem;
      }

      .stat-card {
         background: white;
         padding: 2rem;
         border-radius: 10px;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         text-align: center;
      }

      .stat-value {
         font-size: 2.5rem;
         font-weight: bold;
         color: #2ecc71;
         margin-bottom: 0.5rem;
      }

      .stat-label {
         color: #666;
         font-size: 0.9rem;
      }

      .card {
         background: white;
         border-radius: 10px;
         padding: 2rem;
         margin-bottom: 1.5rem;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .card-title {
         font-size: 1.2rem;
         font-weight: 600;
         color: #333;
         margin-bottom: 1rem;
      }

      .form-group {
         margin-bottom: 1rem;
      }

      .form-group label {
         display: block;
         margin-bottom: 0.5rem;
         color: #333;
         font-weight: 500;
      }

      .form-group input,
      .form-group select,
      .form-group textarea {
         width: 100%;
         padding: 0.75rem;
         border: 2px solid #e1e5e9;
         border-radius: 5px;
         font-size: 1rem;
      }

      .btn {
         background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
         color: white;
         border: none;
         padding: 0.75rem 1.5rem;
         border-radius: 5px;
         cursor: pointer;
         font-weight: 600;
         transition: transform 0.2s;
      }

      .btn:hover {
         transform: translateY(-2px);
      }

      .btn-danger {
         background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
      }

      .btn-warning {
         background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
      }

      .table {
         width: 100%;
         border-collapse: collapse;
         margin-top: 1rem;
      }

      .table th,
      .table td {
         padding: 1rem;
         text-align: left;
         border-bottom: 1px solid #e1e5e9;
      }

      .table th {
         background: #f8fff9;
         color: #2ecc71;
         font-weight: 600;
      }

      .alert {
         padding: 1rem;
         border-radius: 5px;
         margin-bottom: 1rem;
         display: none;
      }

      .alert-success {
         background: #d4edda;
         color: #155724;
         border: 1px solid #c3e6cb;
      }

      .alert-error {
         background: #f8d7da;
         color: #721c24;
         border: 1px solid #f5c6cb;
      }

      .siswa-card {
         background: #f8fff9;
         border: 1px solid #e1e5e9;
         border-radius: 8px;
         padding: 1rem;
         text-align: center;
         margin-bottom: 1rem;
      }

      .siswa-card h4 {
         color: #2ecc71;
         margin-bottom: 0.5rem;
      }

      .siswa-card p {
         color: #666;
         font-size: 0.9rem;
         margin-bottom: 0.75rem;
      }

      .progress-bar {
         background: #e1e5e9;
         border-radius: 10px;
         height: 8px;
         margin: 0.5rem 0;
         overflow: hidden;
      }

      .progress-fill {
         height: 100%;
         background: linear-gradient(90deg, #2ecc71, #27ae60);
         transition: width 0.3s ease;
      }

      .tugas-item {
         background: #f8fff9;
         border: 1px solid #e1e5e9;
         border-radius: 8px;
         padding: 1rem;
         margin-bottom: 1rem;
      }

      .tugas-header {
         display: flex;
         justify-content: space-between;
         align-items: center;
         margin-bottom: 1rem;
      }

      .tugas-status {
         padding: 0.25rem 0.75rem;
         border-radius: 15px;
         font-size: 0.8rem;
         font-weight: 600;
      }

      .status-pending {
         background: #ffeaa7;
         color: #d63031;
      }

      .status-graded {
         background: #00b894;
         color: white;
      }

      .loading {
         text-align: center;
         padding: 2rem;
         color: #666;
      }

      .empty-state {
         text-align: center;
         padding: 2rem;
         color: #666;
      }
   </style>
</head>

<body>
   <div class="header">
      <div>
         <h1>Dashboard Guru</h1>
         <p>Sistem Manajemen E-Learning</p>
      </div>
      <div class="user-info">
         <span id="userGreeting">Selamat datang, Guru</span>
         <button class="logout-btn" onclick="logout()">Logout</button>
      </div>
   </div>

   <div class="main-content">
      <div class="sidebar">
         <div class="nav-item active" onclick="showSection('dashboard')">üìä Dashboard</div>
         <div class="nav-item" onclick="showSection('materi-management')">üìö Materi Saya</div>
         <div class="nav-item" onclick="showSection('tugas-management')">üìù Kelola Tugas</div>
         <div class="nav-item" onclick="showSection('nilai-management')">üéØ Penilaian</div>
         <div class="nav-item" onclick="showSection('siswa-progress')">üë• Progress Siswa</div>
         <div class="nav-item" onclick="showSection('diskusi-management')">üí¨ Diskusi</div>
      </div>

      <div class="content-area">
         <div id="alert" class="alert">
            <span id="alertMessage"></span>
         </div>

         
         <div id="dashboard" class="page-section active">
            <h2>Ringkasan Pembelajaran</h2>

            <div class="stats-grid">
               <div class="stat-card">
                  <div class="stat-value" id="totalMateri">0</div>
                  <div class="stat-label">Materi Saya</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="totalSiswa">0</div>
                  <div class="stat-label">Total Siswa</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="tugasPending">0</div>
                  <div class="stat-label">Tugas Belum Dinilai</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="rataRataNilai">0</div>
                  <div class="stat-label">Rata-rata Nilai</div>
               </div>
            </div>

            <div class="card">
               <div class="card-title">Aktivitas Terakhir</div>
               <div id="recentActivity">
                  <div class="loading">Memuat aktivitas...</div>
               </div>
            </div>
         </div>

         
         <div id="materi-management" class="page-section">
            <h2>Kelola Materi Pembelajaran</h2>

            <div class="card">
               <div class="card-title">Tambah Materi Baru</div>
               <form id="addMateriForm">
                  <div class="form-group">
                     <label for="materiJudul">Judul Materi</label>
                     <input type="text" id="materiJudul" name="judul" required>
                  </div>
                  <div class="form-group">
                     <label for="materiDeskripsi">Deskripsi Materi</label>
                     <textarea id="materiDeskripsi" name="deskripsi" rows="3"
                        placeholder="Deskripsi singkat materi..."></textarea>
                  </div>
                  <div class="form-group">
                     <label for="materiKonten">Konten Materi</label>
                     <textarea id="materiKonten" name="konten" rows="6" placeholder="Masukkan konten pembelajaran..."
                        required></textarea>
                  </div>
                  <button type="submit" class="btn">Tambah Materi</button>
               </form>
            </div>

            <div class="card">
               <div class="card-title">Daftar Materi Saya</div>
               <div id="materiListContainer">
                  <div class="loading">Memuat daftar materi...</div>
               </div>
            </div>
         </div>

         
         <div id="tugas-management" class="page-section">
            <h2>Kelola Tugas</h2>

            <div class="card">
               <div class="card-title">Buat Tugas Baru</div>
               <form id="addTugasForm">
                  <div class="form-group">
                     <label for="tugasMateri">Pilih Materi</label>
                     <select id="tugasMateri" name="materi_id" required>
                        <option value="">-- Pilih Materi --</option>
                     </select>
                  </div>
                  <div class="form-group">
                     <label for="tugasJudul">Judul Tugas</label>
                     <input type="text" id="tugasJudul" name="judul" required>
                  </div>
                  <div class="form-group">
                     <label for="tugasDeskripsi">Deskripsi Tugas</label>
                     <textarea id="tugasDeskripsi" name="deskripsi" rows="4" required></textarea>
                  </div>
                  <div class="form-group">
                     <label for="tugasDeadline">Deadline</label>
                     <input type="datetime-local" id="tugasDeadline" name="deadline" required>
                  </div>
                  <button type="submit" class="btn">Buat Tugas</button>
               </form>
            </div>

            <div class="card">
               <div class="card-title">Daftar Tugas</div>
               <div id="tugasListContainer">
                  <div class="loading">Memuat daftar tugas...</div>
               </div>
            </div>
         </div>

         
         <div id="nilai-management" class="page-section">
            <h2>Kelola Penilaian</h2>

            <div class="card">
               <div class="card-title">Tugas yang Perlu Dinilai</div>
               <div id="tugasPendingContainer">
                  <div class="loading">Memuat tugas pending...</div>
               </div>
            </div>
         </div>

         
         <div id="siswa-progress" class="page-section">
            <h2>Progress Siswa</h2>

            <div class="card">
               <div class="card-title">Daftar Siswa dan Progress</div>
               <div id="siswaProgressContainer">
                  <div class="loading">Memuat progress siswa...</div>
               </div>
            </div>
         </div>

         
         <div id="diskusi-management" class="page-section">
            <h2>Kelola Diskusi</h2>

            <div class="card">
               <div class="card-title">Diskusi Materi Saya</div>
               <div id="diskusiContainer">
                  <div class="loading">Memuat diskusi...</div>
               </div>
            </div>
         </div>
      </div>
   </div>

   <script>
      
      
      
      let currentData = {
         materi: [],
         tugas: [],
         siswa: [],
         diskusi: []
      };

      
      
      
      function showAlert(message, type = 'success') {
         const alert = document.getElementById('alert');
         const alertMessage = document.getElementById('alertMessage');

         alert.className = `alert alert-${type}`;
         alertMessage.textContent = message;
         alert.style.display = 'block';

         setTimeout(() => {
            alert.style.display = 'none';
         }, 5000);
      }

      function formatDate(dateString) {
         if (!dateString) return '-';
         return new Date(dateString).toLocaleDateString('id-ID');
      }

      function formatDateTime(dateString) {
         if (!dateString) return '-';
         return new Date(dateString).toLocaleString('id-ID');
      }

      
      
      
      async function apiCall(endpoint, options = {}) {
         const defaultOptions = {
            method: 'GET',
            headers: {
               'Content-Type': 'application/json',
            },
            credentials: 'include'
         };

         try {
            const response = await fetch(`${endpoint}`, { ...defaultOptions, ...options });
            const data = await response.json();

            if (!response.ok) {
               throw new Error(data.message || 'API Error');
            }

            return data;
         } catch (error) {
            showAlert(error.message || 'Terjadi kesalahan', 'error');
            throw error;
         }
      }

      
      
      
      function showSection(sectionId) {
         
         document.querySelectorAll('.page-section').forEach(section => {
            section.classList.remove('active');
         });

         
         document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
         });

         
         document.getElementById(sectionId).classList.add('active');
         event.target.classList.add('active');

         
         switch (sectionId) {
            case 'materi-management':
               loadMateriList();
               break;
            case 'tugas-management':
               loadTugasList();
               loadMateriOptions();
               break;
            case 'nilai-management':
               loadPendingSubmissions();
               break;
            case 'siswa-progress':
               loadSiswaProgress();
               break;
            case 'diskusi-management':
               loadDiskusi();
               break;
         }
      }

      
      
      
      async function loadDashboardData() {
         try {
            const stats = await apiCall('/guru/dashboard/stats');
            updateDashboardStats(stats.data);

            const activities = await apiCall('/guru/dashboard/recent-activity');
            displayRecentActivity(activities.data);
         } catch (error) {
            console.error('Error loading dashboard:', error);
         }
      }

      function updateDashboardStats(stats) {
         document.getElementById('totalMateri').textContent = stats.total_materi || 0;
         document.getElementById('totalSiswa').textContent = stats.total_siswa || 0;
         document.getElementById('tugasPending').textContent = stats.tugas_pending || 0;
         document.getElementById('rataRataNilai').textContent = stats.rata_nilai || 0;
      }

      function displayRecentActivity(activities) {
         const container = document.getElementById('recentActivity');

         if (activities.length === 0) {
            container.innerHTML = '<div class="empty-state">Tidak ada aktivitas terbaru</div>';
            return;
         }

         container.innerHTML = activities.map(activity => `
            <div style="padding: 0.5rem 0; border-bottom: 1px solid #eee;">
               <strong>${activity.title}</strong> - ${activity.description}
               <div style="font-size: 0.8rem; color: #666;">${formatDateTime(activity.created_at)}</div>
            </div>
         `).join('');
      }

      
      
      
      async function loadMateriList() {
         const container = document.getElementById('materiListContainer');

         try {
            const response = await apiCall('/guru/materi');
            currentData.materi = response.data;
            displayMateriList(response.data);
         } catch (error) {
            container.innerHTML = '<div class="empty-state">Gagal memuat daftar materi</div>';
         }
      }

      // Display materi list
function displayMateriList(materiList) {
  const container = document.getElementById('materiListContainer');

  if (!materiList || materiList.length === 0) {
    container.innerHTML = '<div class="empty-state">Belum ada materi yang dibuat</div>';
    return;
  }

  const table = document.createElement('table');
  table.className = 'table';
  table.innerHTML = `
    <thead>
      <tr>
        <th>Judul</th>
        <th>Deskripsi</th>
        <th>Konten Preview</th>
        <th>Tanggal Dibuat</th>
        <th>Aksi</th>
      </tr>
    </thead>
    <tbody>
      ${materiList.map(materi => `
        <tr>
          <td>${materi.judul}</td>
          <td>${materi.deskripsi}</td>
          <td>
            ${materi.konten ? 
              (materi.konten.length > 100 ? 
                materi.konten.substring(0, 100) + '...' : 
                materi.konten
              ) : 
              'Tidak ada konten'
            }
          </td>
          <td>${materi.created_at ? new Date(materi.created_at).toLocaleDateString('id-ID') : '-'}</td>
          <td>
            <button class="btn" onclick="viewMateri(${materi.id})" style="margin-right: 5px;">Lihat</button>
            <button class="btn btn-warning" onclick="editMateri(${materi.id})" style="margin-right: 5px;">Edit</button>
            <button class="btn btn-danger" onclick="deleteMateri(${materi.id})">Hapus</button>
          </td>
        </tr>
      `).join('')}
    </tbody>
  `;

  container.innerHTML = '';
  container.appendChild(table);
}

      async function loadMateriOptions() {
         const select = document.getElementById('tugasMateri');
         select.innerHTML = '<option value="">-- Pilih Materi --</option>';

         try {
            const response = await apiCall('/guru/materi');
            response.data.forEach(materi => {
               const option = document.createElement('option');
               option.value = materi.id;
               option.textContent = materi.judul;
               select.appendChild(option);
            });
         } catch (error) {
            console.error('Error loading materi options:', error);
         }
      }

      
      
      
      async function loadTugasList() {
         const container = document.getElementById('tugasListContainer');

         try {
            const response = await apiCall('/guru/tugas');
            currentData.tugas = response.data;
            displayTugasList(response.data);
         } catch (error) {
            container.innerHTML = '<div class="empty-state">Gagal memuat daftar tugas</div>';
         }
      }

      function displayTugasList(tugasList) {
         const container = document.getElementById('tugasListContainer');

         if (tugasList.length === 0) {
            container.innerHTML = '<div class="empty-state">Belum ada tugas yang dibuat</div>';
            return;
         }

         container.innerHTML = tugasList.map(tugas => `
            <div class="tugas-item">
               <div class="tugas-header">
                  <h4>${tugas.judul}</h4>
                  <span class="tugas-status status-${tugas.submissions_count > 0 ? 'graded' : 'pending'}">
                     ${tugas.submissions_count || 0} Submission
                  </span>
               </div>
               <p><strong>Materi:</strong> ${tugas.materi_judul || '-'}</p>
               <p><strong>Deadline:</strong> ${formatDate(tugas.deadline)}</p>
               <p>${tugas.deskripsi}</p>
               <div style="margin-top: 1rem;">
                  <button class="btn" onclick="viewTugasDetail(${tugas.id})">Lihat Detail</button>
                  <button class="btn btn-warning" onclick="editTugas(${tugas.id})" style="margin-left: 5px;">Edit</button>
                  <button class="btn btn-danger" onclick="deleteTugas(${tugas.id})" style="margin-left: 5px;">Hapus</button>
               </div>
            </div>
         `).join('');
      }

      
      
      
      async function loadPendingSubmissions() {
  const container = document.getElementById('tugasPendingContainer');
  container.innerHTML = '<div class="loading">Memuat tugas pending...</div>';

  try {
    const response = await fetch('/guru/submissions/pending', {
      method: 'GET',
      credentials: 'include'
    });

    const result = await response.json();
    
    if (result.success) {
      displayPendingSubmissions(result.data);
    } else {
      container.innerHTML = `
        <div class="empty-state">
          <p>${result.error || 'Gagal memuat submission pending'}</p>
          <button class="btn" onclick="loadPendingSubmissions()">Coba Lagi</button>
        </div>
      `;
    }
  } catch (error) {
    console.error('Error loading pending submissions:', error);
    container.innerHTML = `
      <div class="empty-state">
        <p>Terjadi kesalahan jaringan</p>
        <button class="btn" onclick="loadPendingSubmissions()">Coba Lagi</button>
      </div>
    `;
  }
}

      function displayPendingSubmissions(submissions) {
  const container = document.getElementById('tugasPendingContainer');

  if (submissions.length === 0) {
    container.innerHTML = '<div class="empty-state">Tidak ada tugas yang perlu dinilai</div>';
    return;
  }

  container.innerHTML = submissions.map(submission => `
    <div class="tugas-item">
      <div class="tugas-header">
        <h4>${submission.tugas_judul}</h4>
        <span class="tugas-status status-pending">Belum Dinilai</span>
      </div>
      <p><strong>Siswa:</strong> ${submission.siswa_nama}</p>
      <p><strong>Dikumpulkan:</strong> ${formatDateTime(submission.submitted_at)}</p>
      <p><strong>Jawaban:</strong></p>
      <div style="background: #f8f9fa; padding: 1rem; border-radius: 5px; margin: 0.5rem 0;">
        ${submission.jawaban || 'Tidak ada jawaban'}
      </div>
      
      <div style="margin-top: 1rem;">
        <div class="form-group">
          <label for="nilai-${submission.id}">Nilai (0-100)</label>
          <input type="number" id="nilai-${submission.id}" 
                 placeholder="Masukkan nilai" 
                 min="0" max="100" 
                 style="width: 120px; margin-right: 10px;">
        </div>
        
        <div class="form-group">
          <label for="feedback-${submission.id}">Feedback</label>
          <textarea id="feedback-${submission.id}" 
                    placeholder="Masukkan feedback untuk siswa..." 
                    rows="3" 
                    style="width: 100%; padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 5px;"></textarea>
        </div>
        
        <button class="btn" onclick="berikanNilai(${submission.id})">
          Beri Nilai
        </button>
      </div>
    </div>
  `).join('');
}

      async function berikanNilai(submissionId) {
  const nilaiInput = document.getElementById(`nilai-${submissionId}`);
  const feedbackInput = document.getElementById(`feedback-${submissionId}`);
  
  const nilai = nilaiInput ? parseInt(nilaiInput.value) : null;
  const feedback = feedbackInput ? feedbackInput.value : "";

  
  if (nilai === null || isNaN(nilai)) {
    showAlert('Masukkan nilai yang valid (0-100)', 'error');
    return;
  }

  if (nilai < 0 || nilai > 100) {
    showAlert('Nilai harus antara 0-100', 'error');
    return;
  }

  try {
    const response = await fetch(`/guru/submissions/${submissionId}/grade`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify({ 
        nilai: nilai,
        feedback: feedback 
      })
    });

    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.error || 'Terjadi kesalahan');
    }

    if (result.success) {
      showAlert('Nilai berhasil diberikan!');
      
      
      loadPendingSubmissions();
      loadDashboardData();
      
      
      if (nilaiInput) nilaiInput.value = '';
      if (feedbackInput) feedbackInput.value = '';
      
    } else {
      showAlert(result.error || 'Gagal memberikan nilai', 'error');
    }
    
  } catch (error) {
    console.error('Error grading submission:', error);
    showAlert(error.message || 'Terjadi kesalahan saat memberikan nilai', 'error');
  }
}

      
      
      
      async function loadSiswaProgress() {
         const container = document.getElementById('siswaProgressContainer');

         try {
            const response = await apiCall('/guru/siswa/progress');
            displaySiswaProgress(response.data);
         } catch (error) {
            container.innerHTML = '<div class="empty-state">Gagal memuat progress siswa</div>';
         }
      }

      function displaySiswaProgress(siswaList) {
         const container = document.getElementById('siswaProgressContainer');

         if (siswaList.length === 0) {
            container.innerHTML = '<div class="empty-state">Tidak ada data progress siswa</div>';
            return;
         }

         container.innerHTML = siswaList.map(siswa => `
            <div class="siswa-card">
               <h4>${siswa.nama}</h4>
               <p>${siswa.email}</p>
               <div class="progress-bar">
                  <div class="progress-fill" style="width: ${siswa.progress || 0}%"></div>
               </div>
               <p>Progress: ${siswa.progress || 0}%</p>
               <p>Rata-rata Nilai: ${siswa.rata_nilai || 0}</p>
               <button class="btn" onclick="detailSiswaProgress(${siswa.id})" style="margin-top: 0.5rem;">
                  Detail Progress
               </button>
            </div>
         `).join('');
      }

      
      
      
      async function loadDiskusi() {
         const container = document.getElementById('diskusiContainer');

         try {
            const response = await apiCall('/guru/diskusi');
            displayDiskusi(response.data);
         } catch (error) {
            container.innerHTML = '<div class="empty-state">Gagal memuat diskusi</div>';
         }
      }

      function displayDiskusi(diskusiList) {
         const container = document.getElementById('diskusiContainer');

         if (diskusiList.length === 0) {
            container.innerHTML = '<div class="empty-state">Belum ada diskusi untuk materi Anda</div>';
            return;
         }

         container.innerHTML = diskusiList.map(diskusi => `
            <div style="background: #f8fff9; padding: 1rem; margin-bottom: 1rem; border-radius: 8px; border-left: 3px solid #2ecc71;">
               <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                  <strong style="color: #2ecc71;">${diskusi.user_name}</strong>
                  <span style="color: #666; font-size: 0.8rem;">${formatDateTime(diskusi.created_at)}</span>
               </div>
               <p style="line-height: 1.5;">${diskusi.isi}</p>
               <div style="margin-top: 1rem;">
                  <button class="btn" onclick="replyDiskusi(${diskusi.id})" style="margin-right: 10px;">Balas</button>
               </div>
            </div>
         `).join('');
      }

      
      
      
      document.addEventListener('DOMContentLoaded', function () {
         
         document.getElementById('addMateriForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const materiData = {
               judul: formData.get('judul'),
               deskripsi: formData.get('deskripsi'),
               konten: formData.get('konten')
            };

            try {
               await apiCall('/guru/materi', {
                  method: 'POST',
                  body: JSON.stringify(materiData)
               });

               showAlert('Materi berhasil ditambahkan!');
               this.reset();
               loadMateriList();
               loadDashboardData();
            } catch (error) {
               console.error('Error adding materi:', error);
            }
         });

         
         document.getElementById('addTugasForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const tugasData = {
               materi_id: parseInt(formData.get('materi_id')),
               judul: formData.get('judul'),
               deskripsi: formData.get('deskripsi'),
               deadline: formData.get('deadline')
            };

            try {
               await apiCall('/guru/tugas', {
                  method: 'POST',
                  body: JSON.stringify(tugasData)
               });

               showAlert('Tugas berhasil dibuat!');
               this.reset();
               loadTugasList();
               loadDashboardData();
            } catch (error) {
               console.error('Error creating tugas:', error);
            }
         });

         
         loadDashboardData();
      });

      
      
      
      function viewMateri(id) {
         const materi = currentData.materi.find(m => m.id === id);
         if (materi) {
            alert(`Judul: ${materi.judul}\n\nKonten: ${materi.konten}`);
         }
      }

      async function editMateri(id) {
         const materi = currentData.materi.find(m => m.id === id);
         if (!materi) return;

         const newJudul = prompt('Edit Judul Materi:', materi.judul);
         if (!newJudul) return;

         const newKonten = prompt('Edit Konten Materi:', materi.konten);
         if (!newKonten) return;

         try {
            await apiCall(`/guru/materi/${id}`, {
               method: 'PUT',
               body: JSON.stringify({
                  judul: newJudul,
                  konten: newKonten
               })
            });

            showAlert('Materi berhasil diupdate!');
            loadMateriList();
         } catch (error) {
            console.error('Error updating materi:', error);
         }
      }

      async function deleteMateri(id) {
         if (!confirm('Yakin ingin menghapus materi ini?')) return;

         try {
            await apiCall(`/guru/materi/${id}`, {
               method: 'DELETE'
            });

            showAlert('Materi berhasil dihapus!');
            loadMateriList();
            loadDashboardData();
         } catch (error) {
            console.error('Error deleting materi:', error);
         }
      }

      function viewTugasDetail(id) {
         const tugas = currentData.tugas.find(t => t.id === id);
         if (tugas) {
            alert(`Judul: ${tugas.judul}\n\nDeskripsi: ${tugas.deskripsi}\n\nDeadline: ${formatDate(tugas.deadline)}`);
         }
      }

      async function editTugas(id) {
         const tugas = currentData.tugas.find(t => t.id === id);
         if (!tugas) return;

         const newJudul = prompt('Edit Judul Tugas:', tugas.judul);
         if (!newJudul) return;

         const newDeskripsi = prompt('Edit Deskripsi Tugas:', tugas.deskripsi);
         if (!newDeskripsi) return;

         try {
            await apiCall(`/guru/tugas/${id}`, {
               method: 'PUT',
               body: JSON.stringify({
                  judul: newJudul,
                  deskripsi: newDeskripsi
               })
            });

            showAlert('Tugas berhasil diupdate!');
            loadTugasList();
         } catch (error) {
            console.error('Error updating tugas:', error);
         }
      }

      async function deleteTugas(id) {
         if (!confirm('Yakin ingin menghapus tugas ini?')) return;

         try {
            await apiCall(`/guru/tugas/${id}`, {
               method: 'DELETE'
            });

            showAlert('Tugas berhasil dihapus!');
            loadTugasList();
            loadDashboardData();
         } catch (error) {
            console.error('Error deleting tugas:', error);
         }
      }

      function detailSiswaProgress(id) {
         
         window.location.href = `/guru/siswa/${id}/progress/view`;
      }

      async function replyDiskusi(diskusiId) {
         const reply = prompt('Masukkan balasan Anda:');
         if (!reply) return;

         try {
            await apiCall(`/guru/diskusi/${diskusiId}/reply`, {
               method: 'POST',
               body: JSON.stringify({ reply })
            });

            showAlert('Balasan berhasil dikirim!');
            loadDiskusi();
         } catch (error) {
            console.error('Error replying to discussion:', error);
         }
      }

      
      
      
      async function logout() {
         try {
            await apiCall('/auth/logout', { method: 'POST' });
            window.location.href = '/login';
         } catch (error) {
            window.location.href = '/login';
         }
      }
   </script>
</body>

</html>
