<!DOCTYPE html>
<html lang="id">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Daftar Guru - E-Learning</title>
   <style>
      * {
         margin: 0;
         padding: 0;
         box-sizing: border-box;
      }

      body {
         font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
         background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
         min-height: 100vh;
         display: flex;
         justify-content: center;
         align-items: center;
         padding: 2rem 1rem;
      }

      .container {
         background: white;
         padding: 2rem;
         border-radius: 10px;
         box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
         width: 100%;
         max-width: 500px;
         max-height: 90vh;
         overflow-y: auto;
      }

      .logo {
         text-align: center;
         margin-bottom: 2rem;
      }

      .logo h1 {
         color: #333;
         font-size: 2rem;
         margin-bottom: 0.5rem;
      }

      .logo p {
         color: #666;
         font-size: 0.9rem;
      }

      .form-group {
         margin-bottom: 1.5rem;
      }

      label {
         display: block;
         margin-bottom: 0.5rem;
         color: #333;
         font-weight: 500;
      }

      .required {
         color: #e74c3c;
      }

      input[type="text"],
      input[type="email"],
      input[type="password"],
      select,
      textarea {
         width: 100%;
         padding: 0.75rem;
         border: 2px solid #e1e5e9;
         border-radius: 5px;
         font-size: 1rem;
         transition: border-color 0.3s ease;
      }

      input[type="text"]:focus,
      input[type="email"]:focus,
      input[type="password"]:focus,
      select:focus,
      textarea:focus {
         outline: none;
         border-color: #2ecc71;
      }

      .kelas-selection {
         max-height: 150px;
         overflow-y: auto;
         border: 2px solid #e1e5e9;
         border-radius: 5px;
         padding: 0.5rem;
         background: #f8f9fa;
      }

      .kelas-item {
         display: flex;
         align-items: center;
         padding: 0.5rem;
         margin-bottom: 0.25rem;
         background: white;
         border-radius: 3px;
         cursor: pointer;
         transition: background-color 0.3s;
      }

      .kelas-item:hover {
         background: #e8f5e8;
      }

      .kelas-item input[type="checkbox"] {
         width: auto;
         margin-right: 0.75rem;
         transform: scale(1.2);
      }

      .kelas-item label {
         margin: 0;
         cursor: pointer;
         flex: 1;
      }

      .btn {
         width: 100%;
         padding: 0.75rem;
         background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
         color: white;
         border: none;
         border-radius: 5px;
         font-size: 1rem;
         font-weight: 600;
         cursor: pointer;
         transition: transform 0.2s ease;
      }

      .btn:hover {
         transform: translateY(-2px);
      }

      .btn:disabled {
         background: #ccc;
         cursor: not-allowed;
         transform: none;
      }

      .login-link {
         text-align: center;
         margin-top: 1.5rem;
         padding-top: 1.5rem;
         border-top: 1px solid #e1e5e9;
      }

      .login-link a {
         color: #2ecc71;
         text-decoration: none;
         font-weight: 500;
      }

      .login-link a:hover {
         text-decoration: underline;
      }

      .error {
         color: #e74c3c;
         font-size: 0.9rem;
         margin-top: 0.5rem;
         display: none;
         padding: 0.5rem;
         background-color: #fdf2f2;
         border-radius: 3px;
         border-left: 4px solid #e74c3c;
      }

      .success {
         color: #27ae60;
         font-size: 0.9rem;
         margin-top: 0.5rem;
         display: none;
         padding: 0.5rem;
         background-color: #f2fdf5;
         border-radius: 3px;
         border-left: 4px solid #27ae60;
      }

      .password-requirements {
         font-size: 0.8rem;
         color: #666;
         margin-top: 0.5rem;
      }

      .password-requirements ul {
         margin: 0.5rem 0;
         padding-left: 1.2rem;
      }

      .password-requirements li {
         margin: 0.2rem 0;
      }

      .requirement-met {
         color: #27ae60;
      }

      .requirement-not-met {
         color: #e74c3c;
      }

      .loading {
         display: inline-block;
         width: 20px;
         height: 20px;
         border: 3px solid rgba(255, 255, 255, .3);
         border-radius: 50%;
         border-top-color: #fff;
         animation: spin 1s ease-in-out infinite;
         margin-right: 10px;
      }

      @keyframes spin {
         to {
            transform: rotate(360deg);
         }
      }

      .form-note {
         font-size: 0.8rem;
         color: #666;
         margin-top: 0.25rem;
         font-style: italic;
      }

      .section-title {
         color: #2ecc71;
         font-size: 1.1rem;
         margin-bottom: 1rem;
         padding-bottom: 0.5rem;
         border-bottom: 2px solid #e1e5e9;
      }

      .checkbox-note {
         font-size: 0.8rem;
         color: #666;
         margin-bottom: 0.5rem;
      }
   </style>
</head>

<body>
   <div class="container">
      <div class="logo">
         <h1>E-Learning</h1>
         <p>Daftar sebagai Guru</p>
      </div>

      <form id="registerGuruForm">
         <div class="section-title">Informasi Pribadi</div>

         <div class="form-group">
            <label for="nama">Nama Lengkap <span class="required">*</span></label>
            <input type="text" id="nama" name="nama" required>
            <div class="error" id="namaError"></div>
         </div>

         <div class="form-group">
            <label for="email">Email <span class="required">*</span></label>
            <input type="email" id="email" name="email" required>
            <div class="error" id="emailError"></div>
         </div>

         <div class="form-group">
            <label for="bidang">Bidang Keahlian <span class="required">*</span></label>
            <select id="bidang" name="bidang" required>
               <option value="">-- Pilih Bidang --</option>
               <option value="Matematika">Matematika</option>
               <option value="Bahasa Indonesia">Bahasa Indonesia</option>
               <option value="Bahasa Inggris">Bahasa Inggris</option>
               <option value="IPA">IPA (Ilmu Pengetahuan Alam)</option>
               <option value="IPS">IPS (Ilmu Pengetahuan Sosial)</option>
               <option value="PKN">PKN (Pendidikan Kewarganegaraan)</option>
               <option value="Seni Budaya">Seni Budaya</option>
               <option value="Pendidikan Jasmani">Pendidikan Jasmani</option>
               <option value="TIK">TIK (Teknologi Informasi)</option>
               <option value="Agama">Pendidikan Agama</option>
               <option value="Lainnya">Lainnya</option>
            </select>
            <div class="error" id="bidangError"></div>
         </div>

         <div class="section-title">Pengaturan Akun</div>

         <div class="form-group">
            <label for="password">Password <span class="required">*</span></label>
            <input type="password" id="password" name="password" required>
            <div class="password-requirements">
               <p>Password harus memenuhi syarat:</p>
               <ul>
                  <li id="lengthReq" class="requirement-not-met">Minimal 6 karakter</li>
                  <li id="upperReq" class="requirement-not-met">Mengandung huruf besar</li>
                  <li id="lowerReq" class="requirement-not-met">Mengandung huruf kecil</li>
                  <li id="numberReq" class="requirement-not-met">Mengandung angka</li>
               </ul>
            </div>
            <div class="error" id="passwordError"></div>
         </div>

         <div class="form-group">
            <label for="confirmPassword">Konfirmasi Password <span class="required">*</span></label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
            <div class="error" id="confirmPasswordError"></div>
         </div>

         <div class="section-title">Penugasan Kelas (Opsional)</div>

         <div class="form-group">
            <label>Kelas yang Akan Diampu</label>
            <div class="checkbox-note">Pilih kelas yang akan Anda ajar (bisa lebih dari satu)</div>
            <div class="kelas-selection" id="kelasSelection">
               <div style="text-align: center; padding: 1rem; color: #666;">
                  Memuat data kelas...
               </div>
            </div>
            <div class="form-note">Anda dapat mengubah penugasan kelas nanti melalui admin</div>
            <div class="error" id="kelasError"></div>
         </div>

         <div class="form-group">
            <label for="wali_kelas_id">Wali Kelas (Opsional)</label>
            <select id="wali_kelas_id" name="wali_kelas_id">
               <option value="">-- Tidak menjadi wali kelas --</option>
            </select>
            <div class="form-note">Pilih jika Anda akan menjadi wali kelas</div>
            <div class="error" id="waliKelasError"></div>
         </div>

         <button type="submit" class="btn" id="submitBtn">
            <span id="submitText">Daftar sebagai Guru</span>
            <span id="loadingSpinner" class="loading" style="display: none;"></span>
         </button>

         <div class="error" id="generalError"></div>
         <div class="success" id="generalSuccess"></div>
      </form>

      <div class="login-link">
         <p>Sudah punya akun? <a href="/login">Masuk di sini</a></p>
         <p>Atau daftar sebagai <a href="/register">siswa</a></p>
      </div>
   </div>

   <script>
      let kelasData = [];

      // Load kelas data from API
      async function loadKelasData() {
         try {
            const response = await fetch('/kelas');
            if (response.ok) {
               const result = await response.json();
               if (result.success) {
                  kelasData = result.data;
                  populateKelasSelection();
                  populateWaliKelasDropdown();
               } else {
                  showError('generalError', 'Gagal memuat data kelas');
               }
            } else {
               showError('generalError', 'Gagal memuat data kelas');
            }
         } catch (error) {
            console.error('Error loading kelas data:', error);
            showError('generalError', 'Terjadi kesalahan saat memuat data kelas');
         }
      }

      // Populate kelas selection checkboxes
      function populateKelasSelection() {
         const container = document.getElementById('kelasSelection');

         if (kelasData.length === 0) {
            container.innerHTML = '<div style="text-align: center; padding: 1rem; color: #666;">Belum ada kelas tersedia</div>';
            return;
         }

         container.innerHTML = kelasData.map(kelas => `
            <div class="kelas-item">
               <input type="checkbox" id="kelas_${kelas.id}" name="kelas_ids" value="${kelas.id}">
               <label for="kelas_${kelas.id}">
                  ${kelas.nama} (Tingkat ${kelas.tingkat})
               </label>
            </div>
         `).join('');

         // Add click handlers for the entire kelas item
         container.querySelectorAll('.kelas-item').forEach(item => {
            item.addEventListener('click', function (e) {
               if (e.target.tagName !== 'INPUT') {
                  const checkbox = this.querySelector('input[type="checkbox"]');
                  checkbox.checked = !checkbox.checked;
               }
            });
         });
      }

      // Populate wali kelas dropdown
      function populateWaliKelasDropdown() {
         const select = document.getElementById('wali_kelas_id');
         select.innerHTML = '<option value="">-- Tidak menjadi wali kelas --</option>';

         kelasData.forEach(kelas => {
            const option = document.createElement('option');
            option.value = kelas.id;
            option.textContent = `Wali Kelas ${kelas.nama} (${kelas.tingkat})`;
            select.appendChild(option);
         });
      }

      // Show error message
      function showError(elementId, message) {
         const errorDiv = document.getElementById(elementId);
         errorDiv.textContent = message;
         errorDiv.style.display = 'block';
      }

      // Hide error message
      function hideError(elementId) {
         const errorDiv = document.getElementById(elementId);
         errorDiv.style.display = 'none';
         errorDiv.textContent = '';
      }

      // Show success message
      function showSuccess(message) {
         const successDiv = document.getElementById('generalSuccess');
         successDiv.textContent = message;
         successDiv.style.display = 'block';
      }

      // Email validation
      function isValidEmail(email) {
         const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
         return emailRegex.test(email);
      }

      // Password validation
      function validatePassword(password) {
         const errors = [];

         if (password.length < 6) {
            errors.push('Password minimal 6 karakter');
         }
         if (!/[A-Z]/.test(password)) {
            errors.push('Password harus mengandung huruf besar');
         }
         if (!/[a-z]/.test(password)) {
            errors.push('Password harus mengandung huruf kecil');
         }
         if (!/\d/.test(password)) {
            errors.push('Password harus mengandung angka');
         }

         return errors;
      }

      // Password requirements real-time validation
      document.getElementById('password').addEventListener('input', function () {
         const password = this.value;
         const errors = validatePassword(password);

         // Update visual indicators
         document.getElementById('lengthReq').className = password.length >= 6 ? 'requirement-met' : 'requirement-not-met';
         document.getElementById('upperReq').className = /[A-Z]/.test(password) ? 'requirement-met' : 'requirement-not-met';
         document.getElementById('lowerReq').className = /[a-z]/.test(password) ? 'requirement-met' : 'requirement-not-met';
         document.getElementById('numberReq').className = /\d/.test(password) ? 'requirement-met' : 'requirement-not-met';

         // Show/hide error message
         const errorDiv = document.getElementById('passwordError');
         if (errors.length > 0 && password.length > 0) {
            errorDiv.textContent = errors.join(', ');
            errorDiv.style.display = 'block';
         } else {
            errorDiv.style.display = 'none';
         }
      });

      // Confirm password validation
      document.getElementById('confirmPassword').addEventListener('input', function () {
         const password = document.getElementById('password').value;
         const confirmPassword = this.value;
         const errorDiv = document.getElementById('confirmPasswordError');

         if (confirmPassword && password !== confirmPassword) {
            errorDiv.textContent = 'Password tidak cocok';
            errorDiv.style.display = 'block';
         } else {
            errorDiv.style.display = 'none';
         }
      });

      // Form submission
      document.getElementById('registerGuruForm').addEventListener('submit', async function (e) {
         e.preventDefault();

         // Clear previous errors
         document.querySelectorAll('.error').forEach(el => el.style.display = 'none');
         document.getElementById('generalSuccess').style.display = 'none';

         // Get form data
         const nama = document.getElementById('nama').value.trim();
         const email = document.getElementById('email').value.trim();
         const bidang = document.getElementById('bidang').value;
         const password = document.getElementById('password').value;
         const confirmPassword = document.getElementById('confirmPassword').value;
         const wali_kelas_id = document.getElementById('wali_kelas_id').value;

         // Get selected classes
         const selectedKelas = Array.from(document.querySelectorAll('input[name="kelas_ids"]:checked'))
            .map(cb => cb.value);

         // Form validation
         let isValid = true;

         if (!nama) {
            showError('namaError', 'Nama harus diisi');
            isValid = false;
         }

         if (!email) {
            showError('emailError', 'Email harus diisi');
            isValid = false;
         } else if (!isValidEmail(email)) {
            showError('emailError', 'Format email tidak valid');
            isValid = false;
         }

         if (!bidang) {
            showError('bidangError', 'Pilih bidang keahlian');
            isValid = false;
         }

         const passwordErrors = validatePassword(password);
         if (passwordErrors.length > 0) {
            showError('passwordError', passwordErrors.join(', '));
            isValid = false;
         }

         if (password !== confirmPassword) {
            showError('confirmPasswordError', 'Password tidak cocok');
            isValid = false;
         }

         // Validate wali kelas selection
         if (wali_kelas_id && selectedKelas.length > 0 && !selectedKelas.includes(wali_kelas_id)) {
            showError('waliKelasError', 'Wali kelas harus dipilih dari kelas yang Anda ampu');
            isValid = false;
         }

         if (!isValid) return;

         // Show loading state
         const submitBtn = document.getElementById('submitBtn');
         const submitText = document.getElementById('submitText');
         const loadingSpinner = document.getElementById('loadingSpinner');

         submitBtn.disabled = true;
         submitText.textContent = 'Mendaftarkan...';
         loadingSpinner.style.display = 'inline-block';

         // Prepare form data
         const formData = new FormData();
         formData.append('nama', nama);
         formData.append('email', email);
         formData.append('bidang', bidang);
         formData.append('password', password);
         formData.append('confirmPassword', confirmPassword);

         // Add selected classes
         selectedKelas.forEach(kelasId => {
            formData.append('kelas_ids', kelasId);
         });

         if (wali_kelas_id) {
            formData.append('wali_kelas_id', wali_kelas_id);
         }

         try {
            const response = await fetch('/register-guru', {
               method: 'POST',
               body: formData
            });

            if (response.ok || response.status === 302) {
               showSuccess('Registrasi guru berhasil! Mengarahkan ke halaman login...');

               // Reset form
               this.reset();
               document.querySelectorAll('.requirement-met').forEach(el => {
                  el.className = 'requirement-not-met';
               });

               // Clear kelas selections
               document.querySelectorAll('input[name="kelas_ids"]').forEach(cb => {
                  cb.checked = false;
               });

               // Redirect after success
               setTimeout(() => {
                  window.location.href = '/login?message=' + encodeURIComponent('Registrasi guru berhasil. Silakan login.');
               }, 2000);
            } else {
               const result = await response.text();
               try {
                  const errorData = JSON.parse(result);
                  showError('generalError', errorData.error || errorData.message || 'Terjadi kesalahan');
               } catch {
                  showError('generalError', result || 'Terjadi kesalahan');
               }
            }
         } catch (error) {
            console.error('Registration error:', error);
            showError('generalError', 'Terjadi kesalahan jaringan. Silakan coba lagi.');
         } finally {
            // Reset loading state
            submitBtn.disabled = false;
            submitText.textContent = 'Daftar sebagai Guru';
            loadingSpinner.style.display = 'none';
         }
      });

      // Initialize on page load
      document.addEventListener('DOMContentLoaded', function () {
         loadKelasData();

         // Handle URL parameters for form restoration and error display
         const urlParams = new URLSearchParams(window.location.search);
         const error = urlParams.get('error');
         const formData = urlParams.get('formData');

         if (error) {
            showError('generalError', decodeURIComponent(error));
         }

         if (formData) {
            try {
               const data = JSON.parse(decodeURIComponent(formData));
               document.getElementById('nama').value = data.nama || '';
               document.getElementById('email').value = data.email || '';
               document.getElementById('bidang').value = data.bidang || '';

               // Restore class selections
               if (data.kelas_ids) {
                  const kelasIds = data.kelas_ids.split(',');
                  setTimeout(() => {
                     kelasIds.forEach(kelasId => {
                        const checkbox = document.getElementById(`kelas_${kelasId.trim()}`);
                        if (checkbox) checkbox.checked = true;
                     });
                  }, 100);
               }

               if (data.wali_kelas_id) {
                  document.getElementById('wali_kelas_id').value = data.wali_kelas_id;
               }
            } catch (e) {
               console.error('Error parsing form data:', e);
            }
         }
      });
   </script>
</body>

</html>